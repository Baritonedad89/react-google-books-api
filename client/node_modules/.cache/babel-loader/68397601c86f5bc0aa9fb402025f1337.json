{"ast":null,"code":"import _classCallCheck from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/src/pages/Home.js\";\nimport React, { Component } from 'react';\nimport API from '../services/API';\nimport Image from '../components/Image';\nimport Navbar from '../components/Navbar';\nimport Container from '../components/Container';\nimport Row from '../components/Row';\nimport Jumbotron from '../components/Jumbotron';\nimport Col from '../components/Col';\nimport Searchbar from '../components/Searchbar';\nimport Card from '../components/Card';\nimport CardWrapper from '../components/CardWrapper';\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Home)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      result: [],\n      search: \"\",\n      loading: false\n    };\n\n    _this.searchBooks = function (query) {\n      // start UI spinner\n      _this.setState({\n        loading: true,\n        result: []\n      }); // make a call to google books api\n\n\n      API.callGoogle(query).then(function (books) {\n        // if the response is > 0\n        if (books.data.length > 0) {\n          // stop the UI spinner\n          _this.setState({\n            loading: false\n          });\n\n          console.log(books.data); // make a call to my database and retrieve all books stored \n\n          API.getBooks({}).then(function (dbBooks) {\n            // empty array to hold all of the books \n            var dbBooksIds = []; // iterate over stored books and push book ids to empty array \n\n            dbBooks.data.forEach(function (book) {\n              dbBooksIds.push(book.bookId);\n            }); // filter all of the stored books and return books where stored book id doesn't match id coming from google api call \n\n            var filteredBooks = books.data.filter(function (book) {\n              return !dbBooksIds.includes(book.id);\n            }); //  set new state for result\n\n            _this.setState({\n              result: filteredBooks\n            });\n          }); // .catch(err => {\n          //     console.log(err)\n          // })\n        } else {\n          _this.setState({\n            books: []\n          });\n        }\n      });\n    };\n\n    _this.handleInputChange = function (e) {\n      var value = e.target.value; // const name = e.target.name;\n\n      _this.setState({\n        search: value\n      });\n    };\n\n    _this.handleFormSubmit = function (e) {\n      e.preventDefault(); // run google call with search parameter \n\n      _this.searchBooks(_this.state.search);\n\n      console.log(_this.state.search);\n\n      _this.setState({\n        search: \"\"\n      });\n    };\n\n    _this.saveBook = function (e) {\n      // get the id of the book when 'save' is clicked \n      var thisCardsId = e.target.getAttribute('data-id');\n      console.log(thisCardsId);\n      var newSavedBook = _this.state.result; // filter this.state.result to return books where the id is the same as the book clicked \n\n      newSavedBook.filter(function (result) {\n        return result.id === thisCardsId;\n      }) // then map over book and create a new object to send to the database \n      .map(function (book) {\n        var newBook = {\n          bookId: book.id,\n          title: book.volumeInfo.title,\n          authors: book.volumeInfo.authors,\n          description: book.volumeInfo.description,\n          image: book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.smallThumbnail : null,\n          link: book.volumeInfo.infoLink // save book then remove from the result state\n\n        };\n        API.saveBook(newBook).then(function () {\n          // this.setState((state) => {\n          //     // find which book to remove from state by finding the book in the result array that matches the clicked book\n          //     const bookToRemove = state.result.find(book => book.id === newBook.bookId);\n          //     // find the index of that book in the result array\n          //     const indexofBookToRemove = state.result.indexOf(bookToRemove);\n          //     // then delete that one item\n          //     state.result.splice(indexofBookToRemove, 1);\n          //     // update the state \n          //     return {\n          //         result: state.result\n          //     }\n          // })\n          var bookToRemove = state.result.find(function (book) {\n            return book.id === newBook.bookId;\n          }); //     // find the index of that book in the result array\n\n          var indexofBookToRemove = state.result.indexOf(bookToRemove); //     // then delete that one item\n          //     state.result.splice(indexofBookToRemove, 1);\n          //     // update the state \n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(Navbar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }), React.createElement(Image, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }), React.createElement(Jumbotron, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, React.createElement(Searchbar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col l12 center align\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"preloader-wrapper big active\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"spinner-layer spinner-blue-only\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"circle-clipper left\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"circle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          class: \"gap-patch\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"circle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          class: \"circle-clipper right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          class: \"circle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        })))))));\n      } // else \n\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(Image, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Searchbar, {\n        value: this.state.search,\n        handleInputChange: this.handleInputChange,\n        handleFormSubmit: this.handleFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      })), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(CardWrapper, {\n        title: 'Results',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, this.state.result.map(function (result) {\n        return React.createElement(Card, {\n          key: result.id,\n          url: result.volumeInfo.imageLinks ? result.volumeInfo.imageLinks.smallThumbnail : \"https://via.placeholder.com/128x124\",\n          name: result.volumeInfo.title,\n          author: result.volumeInfo.authors,\n          infoLink: result.volumeInfo.infoLink,\n          desc: result.volumeInfo.description ? result.volumeInfo.description : \"No description\",\n          handleBookSave: _this2.saveBook,\n          id: result.id,\n          leftButton: \"View\",\n          rightButton: \"Save\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        });\n      }))))));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/src/pages/Home.js"],"names":["React","Component","API","Image","Navbar","Container","Row","Jumbotron","Col","Searchbar","Card","CardWrapper","Home","state","result","search","loading","searchBooks","query","setState","callGoogle","then","books","data","length","console","log","getBooks","dbBooks","dbBooksIds","forEach","book","push","bookId","filteredBooks","filter","includes","id","handleInputChange","e","value","target","handleFormSubmit","preventDefault","saveBook","thisCardsId","getAttribute","newSavedBook","map","newBook","title","volumeInfo","authors","description","image","imageLinks","smallThumbnail","link","infoLink","bookToRemove","find","indexofBookToRemove","indexOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport API from '../services/API'\nimport Image from '../components/Image'\nimport Navbar from '../components/Navbar'\nimport Container from '../components/Container'\nimport Row from '../components/Row'\nimport Jumbotron from '../components/Jumbotron';\nimport Col from '../components/Col'\nimport Searchbar from '../components/Searchbar'\nimport Card from '../components/Card'\nimport CardWrapper from '../components/CardWrapper'\n\n\n\nclass Home extends Component {\n    state = {\n        result: [],\n        search: \"\",\n        loading: false,\n\n    };\n\n\n\n    searchBooks = query => {\n        // start UI spinner\n        this.setState({ loading: true, result: [] })\n\n        // make a call to google books api\n        API\n            .callGoogle(query)\n            .then(books => {\n                // if the response is > 0\n                if (books.data.length > 0) {\n                    // stop the UI spinner\n                    this.setState({ loading: false });\n                    console.log(books.data)\n\n                    // make a call to my database and retrieve all books stored \n                    API.getBooks({})\n                        .then(dbBooks => {\n                            // empty array to hold all of the books \n                            const dbBooksIds = [];\n                            // iterate over stored books and push book ids to empty array \n                            dbBooks.data.forEach(book => {\n                                dbBooksIds.push(book.bookId)\n                            });\n                            // filter all of the stored books and return books where stored book id doesn't match id coming from google api call \n                            const filteredBooks = books.data.filter(book => !dbBooksIds.includes(book.id));\n\n                            //  set new state for result\n                            this.setState({\n                                result: filteredBooks\n                            })\n\n\n                        })\n                    // .catch(err => {\n                    //     console.log(err)\n                    // })\n                } else {\n                    this.setState({\n                        books: []\n                    });\n                }\n            })\n    }\n\n    handleInputChange = e => {\n        const value = e.target.value;\n        // const name = e.target.name;\n        this.setState({\n            search: value\n        });\n    };\n\n    // When the form is submitted, search the OMDB API for the value of `this.state.search`\n    handleFormSubmit = e => {\n        e.preventDefault();\n        // run google call with search parameter \n        this.searchBooks(this.state.search);\n        console.log(this.state.search)\n        this.setState({\n            search: \"\"\n        })\n    };\n\n\n\n    saveBook = (e) => {\n        // get the id of the book when 'save' is clicked \n        const thisCardsId = e.target.getAttribute('data-id');\n        console.log(thisCardsId)\n\n        const newSavedBook = this.state.result\n        // filter this.state.result to return books where the id is the same as the book clicked \n        newSavedBook\n            .filter(result => result.id === thisCardsId)\n            // then map over book and create a new object to send to the database \n            .map(book => {\n                const newBook = {\n                    bookId: book.id,\n                    title: book.volumeInfo.title,\n                    authors: book.volumeInfo.authors,\n                    description: book.volumeInfo.description,\n                    image: book.volumeInfo.imageLinks ? book.volumeInfo.imageLinks.smallThumbnail : null,\n                    link: book.volumeInfo.infoLink\n                }\n                // save book then remove from the result state\n                API.saveBook(newBook)\n                    .then(() => {\n                        // this.setState((state) => {\n                        //     // find which book to remove from state by finding the book in the result array that matches the clicked book\n                        //     const bookToRemove = state.result.find(book => book.id === newBook.bookId);\n                        //     // find the index of that book in the result array\n                        //     const indexofBookToRemove = state.result.indexOf(bookToRemove);\n                        //     // then delete that one item\n                        //     state.result.splice(indexofBookToRemove, 1);\n                        //     // update the state \n                        //     return {\n                        //         result: state.result\n                        //     }\n                        // })\n\n                        const bookToRemove = state.result.find(book => book.id === newBook.bookId);\n                        //     // find the index of that book in the result array\n                            const indexofBookToRemove = state.result.indexOf(bookToRemove);\n                        //     // then delete that one item\n                        //     state.result.splice(indexofBookToRemove, 1);\n                        //     // update the state \n\n\n\n\n\n\n                    })\n            });\n    }\n\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div>\n                    <Navbar />\n                    <Image />\n                    <Jumbotron>\n                        <Searchbar />\n                    </Jumbotron>\n                    <div className=\"row\">\n                        <div className=\"col l12 center align\">\n                            <div class=\"preloader-wrapper big active\">\n                                <div class=\"spinner-layer spinner-blue-only\">\n                                    <div class=\"circle-clipper left\">\n                                        <div class=\"circle\"></div>\n                                    </div><div class=\"gap-patch\">\n                                        <div class=\"circle\"></div>\n                                    </div><div class=\"circle-clipper right\">\n                                        <div class=\"circle\"></div>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n            )\n\n\n        }\n        // else \n        return (\n\n            <div>\n                <Navbar />\n                <Image />\n                <Jumbotron>\n                    <Searchbar\n                        value={this.state.search}\n                        handleInputChange={this.handleInputChange}\n                        handleFormSubmit={this.handleFormSubmit}\n                    />\n\n                </Jumbotron>\n\n                <Container>\n                    <Row>\n                        <Col>\n\n\n                            <CardWrapper title={'Results'}>\n\n\n\n                                {this.state.result.map(result => (\n                                    <Card\n                                        key={result.id}\n                                        url={result.volumeInfo.imageLinks ? result.volumeInfo.imageLinks.smallThumbnail : \"https://via.placeholder.com/128x124\"}\n                                        name={result.volumeInfo.title}\n                                        author={result.volumeInfo.authors}\n                                        infoLink={result.volumeInfo.infoLink}\n                                        desc={result.volumeInfo.description ? result.volumeInfo.description : \"No description\"}\n                                        handleBookSave={this.saveBook}\n                                        id={result.id}\n                                        leftButton={\"View\"}\n                                        rightButton={\"Save\"}\n                                    />\n\n                                ))}\n\n\n                            </CardWrapper>\n\n\n\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n\n\n        )\n    }\n}\n\n\n\n\n\n\nexport default Home"]},"metadata":{},"sourceType":"module"}