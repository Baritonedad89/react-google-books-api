{"ast":null,"code":"import _classCallCheck from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/src/pages/Books.js\";\nimport React, { Component } from 'react';\nimport API from '../services/API';\nimport Container from '../components/Container';\nimport Row from '../components/Row';\nimport Col from '../components/Col';\nimport { Link } from \"react-router-dom\";\nimport Jumbotron from '../components/Jumbotron';\nimport Navbar from '../components/Navbar';\nimport CardWrapper from '../components/CardWrapper';\nimport Card from '../components/Card';\n\nvar Books =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Books, _Component);\n\n  function Books() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Books);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Books)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      result: []\n    };\n\n    _this.deleteBook = function (e) {\n      // get the id of the book when 'delete' is clicked \n      var thisCardsId = e.target.getAttribute('data-id');\n      console.log(thisCardsId); // delete book with the given id \n\n      API.deleteBook(thisCardsId).then(function () {\n        console.log('book deleted');\n\n        _this.setState(function (state) {\n          // find which book to remove from state by finding the book in the result array that matches the clicked book's id\n          var bookToRemove = state.result.find(function (book) {\n            return book.id === thisCardsId;\n          }); // find the index of that book in the result array\n\n          var indexofBookToRemove = state.result.indexOf(bookToRemove); // then delete that one item\n\n          state.result.splice(indexofBookToRemove, 1); // update the state \n\n          return {\n            result: state.result\n          };\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Books, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      API.getBooks().then(function (res) {\n        return _this2.setState({\n          result: res.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log(this.state.result);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(CardWrapper, {\n        count: this.state.result.length,\n        title: 'Saved Books',\n        message: this.state.result == 0 ? 'No saved books!' : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.state.result.map(function (result) {\n        return React.createElement(Card, {\n          key: result._id,\n          url: result.image ? result.image : \"https://via.placeholder.com/128x124\",\n          name: result.title,\n          author: result.authors,\n          infoLink: result.link,\n          desc: result.description ? result.description : \"No description\",\n          id: result._id,\n          handleBookDelete: _this3.deleteBook,\n          leftButton: \"View\",\n          rightButton: \"Delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        });\n      }))))));\n    }\n  }]);\n\n  return Books;\n}(Component);\n\nexport default Books;","map":{"version":3,"sources":["/Users/codymj/Coding Bootcamp/Homework/react-google-books-api/client/src/pages/Books.js"],"names":["React","Component","API","Container","Row","Col","Link","Jumbotron","Navbar","CardWrapper","Card","Books","state","result","deleteBook","e","thisCardsId","target","getAttribute","console","log","then","setState","bookToRemove","find","book","id","indexofBookToRemove","indexOf","splice","getBooks","res","data","catch","err","length","map","_id","image","title","authors","link","description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport API from '../services/API'\nimport Container from '../components/Container'\nimport Row from '../components/Row'\nimport Col from '../components/Col'\nimport { Link } from \"react-router-dom\";\n\nimport Jumbotron from '../components/Jumbotron';\nimport Navbar from '../components/Navbar'\nimport CardWrapper from '../components/CardWrapper'\nimport Card from '../components/Card'\n\n\nclass Books extends Component {\n    state = {\n        result: [],\n    }\n\n    componentDidMount() {\n        API\n            .getBooks()\n            .then(res => this.setState({ result: res.data }))\n            .catch(err => console.log(err))\n    }\n\n    componentDidUpdate() {\n        console.log(this.state.result);\n    }\n\n    deleteBook = e => {\n        // get the id of the book when 'delete' is clicked \n        const thisCardsId = e.target.getAttribute('data-id');\n        console.log(thisCardsId);\n\n        // delete book with the given id \n        API.deleteBook(thisCardsId)\n            .then(() => {\n                console.log('book deleted')\n                this.setState((state) => {\n                    // find which book to remove from state by finding the book in the result array that matches the clicked book's id\n                    const bookToRemove = state.result.find(book => book.id === thisCardsId);\n                    // find the index of that book in the result array\n                    const indexofBookToRemove = state.result.indexOf(bookToRemove);\n                    // then delete that one item\n                    state.result.splice(indexofBookToRemove, 1);\n                    // update the state \n                    return {\n                        result: state.result\n                    }\n                })\n            })\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Navbar />\n                <Jumbotron></Jumbotron>\n                <Container>\n                    <Row>\n                        <Col>\n                            <CardWrapper count={this.state.result.length}  title={'Saved Books'} message={this.state.result == 0 ? 'No saved books!' : null}>\n                                {this.state.result.map(result => (\n                                    <Card\n                                        key={result._id}\n                                        url={result.image ? result.image : \"https://via.placeholder.com/128x124\"}\n                                        name={result.title}\n                                        author={result.authors}\n                                        infoLink={result.link}\n                                        desc={result.description ? result.description : \"No description\"}\n                                        id={result._id}\n                                        handleBookDelete={this.deleteBook}\n                                        leftButton={\"View\"}\n                                        rightButton={\"Delete\"}\n                                    />\n\n                                ))}\n                            </CardWrapper>\n                        </Col>\n                    </Row>\n\n                </Container>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Books"]},"metadata":{},"sourceType":"module"}